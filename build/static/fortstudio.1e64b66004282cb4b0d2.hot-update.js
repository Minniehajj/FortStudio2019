webpackHotUpdate("fortstudio",{

/***/ "./packages/mars-theme/src/components/footer.js":
/*!******************************************************!*\
  !*** ./packages/mars-theme/src/components/footer.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./link */ \"./packages/mars-theme/src/components/link.js\");\n/* harmony import */ var _partials_card__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./partials/card */ \"./packages/mars-theme/src/components/partials/card.js\");\n/* harmony import */ var _partials_FooterVideoPlayer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./partials/FooterVideoPlayer */ \"./packages/mars-theme/src/components/partials/FooterVideoPlayer.js\");\n/* harmony import */ var _partials_centeredCard__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./partials/centeredCard */ \"./packages/mars-theme/src/components/partials/centeredCard.js\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}class Footer extends react__WEBPACK_IMPORTED_MODULE_1__[\"Component\"]{constructor(props){super(props);}isOnScreen(){/* get the elements */var elements=document.getElementsByClassName(\"spy\");/* iterate */Array.prototype.forEach.call(elements,function(element,index){var bounds=element.getBoundingClientRect();if(bounds.top<window.innerHeight&&bounds.bottom>0){element.classList.add(\"inview\");}else{// element.classList.remove(\"inview\");\n}});window.setTimeout(this.isOnScreen.bind(this),250);}componentDidMount(){window.setTimeout(this.isOnScreen.bind(this),250);// window.onscroll = function(ev) {\n//   var stickyfooter = document.querySelector(\"#stuck\");\n//   if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n//     stickyfooter.classList.add(\"at-bottom\");\n//   } else {\n//     stickyfooter.classList.remove(\"at-bottom\");\n//   }\n// };\nwindow.onscroll=function(){var stickyfooter=document.querySelector(\"#stuck\");var pageHeight=document.documentElement.offsetHeight,windowHeight=window.innerHeight,scrollPosition=window.scrollY||window.pageYOffset||document.body.scrollTop+(document.documentElement&&document.documentElement.scrollTop||0);if(pageHeight<=windowHeight+scrollPosition){stickyfooter.classList.add(\"at-bottom\");}else{stickyfooter.classList.remove(\"at-bottom\");}};}render(){var options=this.props.state.source.get(\"acf-options-page\");return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(FooterContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(TopWrapper,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(TopFooter,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Tout,{className:\"spy\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"h4\",null,options.acf.footer_section.hire_headline),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"p\",{className:\"p1\",dangerouslySetInnerHTML:{__html:options.acf.footer_section.hire_body}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_partials_card__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{target:\"_blank\",linkURL:\"mailto:projects@fortyeah.com\",linkText:options.acf.footer_section.hire_cta_text})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Tout,{className:\"spy\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"h4\",null,options.acf.footer_section.request_work_headline),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"p\",{className:\"p1\",dangerouslySetInnerHTML:{__html:options.acf.footer_section.request_work_body}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_partials_card__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{linkURL:\"/contact\",linkText:options.acf.footer_section.request_work_cta_text})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Tout,{className:\"spy\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"h4\",null,options.acf.footer_section.careers_headline),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"p\",{className:\"p1\",dangerouslySetInnerHTML:{__html:options.acf.footer_section.careers_body}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_partials_card__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{linkURL:\"mailto:careers@fortyeah.com\",linkText:options.acf.footer_section.careers_cta_text})))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(BottomWrapper,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(BottomFooter,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(CenterContainer,{link:\"/\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"24.463\",height:\"52.227\",viewBox:\"0 0 24.463 52.227\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"path\",{id:\"logo-f_short\",d:\"M23.169,43.011H0v9.216H23.169Zm-12.8-33.8H24.463V0H0V33.8H10.369V23.812h12.8V14.593h-12.8Z\",fill:\"#1d1d1d\"}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(LeftContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(SocialContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledSocialLink,{target:options.acf.social_section.instagram.target,link:options.acf.social_section.instagram.url},options.acf.social_section.instagram.title),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledSocialLink,{target:options.acf.social_section.dribble.target,link:options.acf.social_section.dribble.url},options.acf.social_section.dribble.title),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledSocialLink,{target:options.acf.social_section.linkedin.target,link:options.acf.social_section.linkedin.url},options.acf.social_section.linkedin.title)),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(ContactContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Address,{href:\"https://goo.gl/maps/k2qMiBH8gafxj47c7\",target:\"_blank\",dangerouslySetInnerHTML:{__html:options.acf.social_section.address}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Phone,{target:\"_blank\",link:\"tel:\"+options.acf.social_section.phone_number_field},options.acf.social_section.phone_number_field))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(RightContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(RightWrapper,{id:\"stuck\",className:this.props.activeTout},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledCard,{linkURL:\"/reel\",activeTout:this.props.activeTout,linkText:options.acf.footer_cta_text.reel_text}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledCard,{linkURL:\"/contact\",activeTout:this.props.activeTout,linkText:options.acf.footer_cta_text.work_sample_form_text})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(NotFixedContainer,{className:this.props.activeTout},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledCard,{linkURL:\"/reel\",activeTout:this.props.activeTout,linkText:options.acf.footer_cta_text.reel_text}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledCard,{linkURL:\"/contact\",activeTout:this.props.activeTout,linkText:options.acf.footer_cta_text.work_sample_form_text}))))));}}/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Footer));var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma0\",label:\"Container\"})( false?undefined:{name:\"am5mni\",styles:\"width:1440px;max-width:100%;box-sizing:border-box;padding:24px 0;display:flex;justify-content:space-around;margin:auto;@media (max-width:1024px){width:auto;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Title=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"h2\",{target:\"e8kjvma1\",label:\"Title\"})( false?undefined:{name:\"1ou2v44\",styles:\"margin:0;margin-bottom:16px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var StyledCard=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_partials_centeredCard__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{target:\"e8kjvma2\",label:\"StyledCard\"})( false?undefined:{name:\"lvyu5j\",styles:\"margin-right:10px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var StyledLink=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma3\",label:\"StyledLink\"})( false?undefined:{name:\"17d94v1\",styles:\"text-decoration:none;text-transform:uppercase;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var FooterContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma4\",label:\"FooterContainer\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var NotFixedContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma5\",label:\"NotFixedContainer\"})( false?undefined:{name:\"1ocut5d\",styles:\"display:flex;.link{&.first{&:first-of-type{opacity:0;pointer-events:none;}}&.last{&:last-of-type{opacity:0;pointer-events:none;}}}@media (max-width:1024px){display:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var TopFooter=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma6\",label:\"TopFooter\"})( false?undefined:{name:\"1d3arwg\",styles:\"display:flex;max-width:1440px;width:100%;margin:auto;padding-top:125px;padding-bottom:125px;justify-content:space-between;@media (max-width:1024px){flex-wrap:wrap;padding-left:60px;padding-right:60px;width:auto;}@media (max-width:480px){flex-direction:column;padding:0;padding-top:60px;padding-bottom:60px;width:100%;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var StyledVideoPlayer=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_partials_FooterVideoPlayer__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{target:\"e8kjvma7\",label:\"StyledVideoPlayer\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var Tout=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma8\",label:\"Tout\"})( false?undefined:{name:\"143blm0\",styles:\"color:#ffffff;width:calc(70% / 3);position:relative;padding-left:21px;position:relative;.link{z-index:6;position:absolute;bottom:-110px;left:0%;transform:translateX(-15%);border-radius:50%;@media (max-width:1024px){a{height:auto;width:auto;}position:relative;transform:none;bottom:auto;height:51px;width:auto;}&.first{}}p{color:#ffffff;margin-bottom:15px;max-width:95%;}h4{text-transform:uppercase;line-height:20px;margin-bottom:12px;}a{letter-spacing:0.84px;padding-top:5px;}&:before{width:2px;content:\\\"\\\";height:115%;left:0;background:#ffc40a;position:absolute;@media (max-width:1024px){height:90%;}}&:first-of-type{margin-left:114px;.link{}@media (max-width:1024px){.link{transform:none;}}}&:last-of-type{margin-right:114px;.link{transform:translateX(-21%);}}@media (max-width:1024px){width:calc(90% / 2);margin-bottom:60px;margin-left:0;&:first-of-type{margin-left:0;margin-left:0;}&:last-of-type{margin-right:0;margin-bottom:0;.link{transform:none;}}}@media (max-width:480px){width:80%;margin-bottom:60px;margin-left:36px;&:first-of-type{margin-left:0;margin-left:36px;}&:last-of-type{margin-right:0;margin-bottom:0;.link{transform:none;}}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9taW5ob3EvU2l0ZXMvRm9ydFN0dWRpby9wYWNrYWdlcy9tYXJzLXRoZW1lL3NyYy9jb21wb25lbnRzL2Zvb3Rlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2UXVCIiwiZmlsZSI6Ii9Vc2Vycy9taW5ob3EvU2l0ZXMvRm9ydFN0dWRpby9wYWNrYWdlcy9tYXJzLXRoZW1lL3NyYy9jb21wb25lbnRzL2Zvb3Rlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IExpbmsgZnJvbSBcIi4vbGlua1wiO1xuaW1wb3J0IENhcmQgZnJvbSBcIi4vcGFydGlhbHMvY2FyZFwiO1xuaW1wb3J0IEZvb3RlclZpZGVvUGxheWVyIGZyb20gXCIuL3BhcnRpYWxzL0Zvb3RlclZpZGVvUGxheWVyXCI7XG5pbXBvcnQgQ2VudGVyZWRDYXJkIGZyb20gXCIuL3BhcnRpYWxzL2NlbnRlcmVkQ2FyZFwiO1xuY2xhc3MgRm9vdGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICBpc09uU2NyZWVuKCkge1xuICAgIC8qIGdldCB0aGUgZWxlbWVudHMgKi9cbiAgICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwic3B5XCIpO1xuICAgIC8qIGl0ZXJhdGUgKi9cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgICAgdmFyIGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIGlmIChib3VuZHMudG9wIDwgd2luZG93LmlubmVySGVpZ2h0ICYmIGJvdW5kcy5ib3R0b20gPiAwKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImludmlld1wiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImludmlld1wiKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuaXNPblNjcmVlbi5iaW5kKHRoaXMpLCAyNTApO1xuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuaXNPblNjcmVlbi5iaW5kKHRoaXMpLCAyNTApO1xuICAgIC8vIHdpbmRvdy5vbnNjcm9sbCA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgLy8gICB2YXIgc3RpY2t5Zm9vdGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdHVja1wiKTtcbiAgICAvLyAgIGlmICh3aW5kb3cuaW5uZXJIZWlnaHQgKyB3aW5kb3cuc2Nyb2xsWSA+PSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCkge1xuICAgIC8vICAgICBzdGlja3lmb290ZXIuY2xhc3NMaXN0LmFkZChcImF0LWJvdHRvbVwiKTtcbiAgICAvLyAgIH0gZWxzZSB7XG4gICAgLy8gICAgIHN0aWNreWZvb3Rlci5jbGFzc0xpc3QucmVtb3ZlKFwiYXQtYm90dG9tXCIpO1xuICAgIC8vICAgfVxuICAgIC8vIH07XG4gICAgd2luZG93Lm9uc2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc3RpY2t5Zm9vdGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdHVja1wiKTtcbiAgICAgIHZhciBwYWdlSGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldEhlaWdodCxcbiAgICAgICAgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0LFxuICAgICAgICBzY3JvbGxQb3NpdGlvbiA9XG4gICAgICAgICAgd2luZG93LnNjcm9sbFkgfHxcbiAgICAgICAgICB3aW5kb3cucGFnZVlPZmZzZXQgfHxcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCArXG4gICAgICAgICAgICAoKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSB8fFxuICAgICAgICAgICAgICAwKTtcblxuXG4gICAgICBpZiAocGFnZUhlaWdodCA8PSB3aW5kb3dIZWlnaHQgKyBzY3JvbGxQb3NpdGlvbikge1xuICAgICAgICAgc3RpY2t5Zm9vdGVyLmNsYXNzTGlzdC5hZGQoXCJhdC1ib3R0b21cIik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RpY2t5Zm9vdGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJhdC1ib3R0b21cIik7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucHJvcHMuc3RhdGUuc291cmNlLmdldChcImFjZi1vcHRpb25zLXBhZ2VcIik7XG4gICAgcmV0dXJuIChcbiAgICAgIDxGb290ZXJDb250YWluZXI+XG4gICAgICAgIDxUb3BXcmFwcGVyPlxuICAgICAgICAgIDxUb3BGb290ZXI+XG4gICAgICAgICAgICA8VG91dCBjbGFzc05hbWU9XCJzcHlcIj5cbiAgICAgICAgICAgICAgPGg0PntvcHRpb25zLmFjZi5mb290ZXJfc2VjdGlvbi5oaXJlX2hlYWRsaW5lfTwvaDQ+XG4gICAgICAgICAgICAgIDxwXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicDFcIlxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgICAgICBfX2h0bWw6IG9wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLmhpcmVfYm9keVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID48L3A+XG4gICAgICAgICAgICAgIDxDYXJkXG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICBsaW5rVVJMPVwibWFpbHRvOnByb2plY3RzQGZvcnR5ZWFoLmNvbVwiXG4gICAgICAgICAgICAgICAgbGlua1RleHQ9e29wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLmhpcmVfY3RhX3RleHR9XG4gICAgICAgICAgICAgID48L0NhcmQ+XG4gICAgICAgICAgICA8L1RvdXQ+XG4gICAgICAgICAgICA8VG91dCBjbGFzc05hbWU9XCJzcHlcIj5cbiAgICAgICAgICAgICAgPGg0PntvcHRpb25zLmFjZi5mb290ZXJfc2VjdGlvbi5yZXF1ZXN0X3dvcmtfaGVhZGxpbmV9PC9oND5cbiAgICAgICAgICAgICAgPHBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwMVwiXG4gICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24ucmVxdWVzdF93b3JrX2JvZHlcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+PC9wPlxuICAgICAgICAgICAgICA8Q2FyZFxuICAgICAgICAgICAgICAgIGxpbmtVUkw9XCIvY29udGFjdFwiXG4gICAgICAgICAgICAgICAgbGlua1RleHQ9e29wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLnJlcXVlc3Rfd29ya19jdGFfdGV4dH1cbiAgICAgICAgICAgICAgPjwvQ2FyZD5cbiAgICAgICAgICAgIDwvVG91dD5cbiAgICAgICAgICAgIDxUb3V0IGNsYXNzTmFtZT1cInNweVwiPlxuICAgICAgICAgICAgICA8aDQ+e29wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLmNhcmVlcnNfaGVhZGxpbmV9PC9oND5cbiAgICAgICAgICAgICAgPHBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwMVwiXG4gICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24uY2FyZWVyc19ib2R5XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPjwvcD5cbiAgICAgICAgICAgICAgPENhcmRcbiAgICAgICAgICAgICAgICBsaW5rVVJMPVwibWFpbHRvOmNhcmVlcnNAZm9ydHllYWguY29tXCJcbiAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24uY2FyZWVyc19jdGFfdGV4dH1cbiAgICAgICAgICAgICAgPjwvQ2FyZD5cbiAgICAgICAgICAgIDwvVG91dD5cbiAgICAgICAgICA8L1RvcEZvb3Rlcj5cbiAgICAgICAgPC9Ub3BXcmFwcGVyPlxuICAgICAgICA8Qm90dG9tV3JhcHBlcj5cbiAgICAgICAgICA8Qm90dG9tRm9vdGVyPlxuICAgICAgICAgICAgPENlbnRlckNvbnRhaW5lciBsaW5rPVwiL1wiPlxuICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgd2lkdGg9XCIyNC40NjNcIlxuICAgICAgICAgICAgICAgIGhlaWdodD1cIjUyLjIyN1wiXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyNC40NjMgNTIuMjI3XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICBpZD1cImxvZ28tZl9zaG9ydFwiXG4gICAgICAgICAgICAgICAgICBkPVwiTTIzLjE2OSw0My4wMTFIMHY5LjIxNkgyMy4xNjlabS0xMi44LTMzLjhIMjQuNDYzVjBIMFYzMy44SDEwLjM2OVYyMy44MTJoMTIuOFYxNC41OTNoLTEyLjhaXCJcbiAgICAgICAgICAgICAgICAgIGZpbGw9XCIjMWQxZDFkXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIDwvQ2VudGVyQ29udGFpbmVyPlxuICAgICAgICAgICAgPExlZnRDb250YWluZXI+XG4gICAgICAgICAgICAgIDxTb2NpYWxDb250YWluZXI+XG4gICAgICAgICAgICAgICAgPFN0eWxlZFNvY2lhbExpbmtcbiAgICAgICAgICAgICAgICAgIHRhcmdldD17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uaW5zdGFncmFtLnRhcmdldH1cbiAgICAgICAgICAgICAgICAgIGxpbms9e29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmluc3RhZ3JhbS51cmx9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmluc3RhZ3JhbS50aXRsZX1cbiAgICAgICAgICAgICAgICA8L1N0eWxlZFNvY2lhbExpbms+XG4gICAgICAgICAgICAgICAgPFN0eWxlZFNvY2lhbExpbmtcbiAgICAgICAgICAgICAgICAgIHRhcmdldD17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uZHJpYmJsZS50YXJnZXR9XG4gICAgICAgICAgICAgICAgICBsaW5rPXtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5kcmliYmxlLnVybH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uZHJpYmJsZS50aXRsZX1cbiAgICAgICAgICAgICAgICA8L1N0eWxlZFNvY2lhbExpbms+XG4gICAgICAgICAgICAgICAgPFN0eWxlZFNvY2lhbExpbmtcbiAgICAgICAgICAgICAgICAgIHRhcmdldD17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24ubGlua2VkaW4udGFyZ2V0fVxuICAgICAgICAgICAgICAgICAgbGluaz17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24ubGlua2VkaW4udXJsfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5saW5rZWRpbi50aXRsZX1cbiAgICAgICAgICAgICAgICA8L1N0eWxlZFNvY2lhbExpbms+XG4gICAgICAgICAgICAgIDwvU29jaWFsQ29udGFpbmVyPlxuICAgICAgICAgICAgICA8Q29udGFjdENvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8QWRkcmVzc1xuICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vZ29vLmdsL21hcHMvazJxTWlCSDhnYWZ4ajQ3YzdcIlxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+PC9BZGRyZXNzPlxuICAgICAgICAgICAgICAgIDxQaG9uZVxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIGxpbms9e1widGVsOlwiICsgb3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24ucGhvbmVfbnVtYmVyX2ZpZWxkfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5waG9uZV9udW1iZXJfZmllbGR9XG4gICAgICAgICAgICAgICAgPC9QaG9uZT5cbiAgICAgICAgICAgICAgPC9Db250YWN0Q29udGFpbmVyPlxuICAgICAgICAgICAgPC9MZWZ0Q29udGFpbmVyPlxuICAgICAgICAgICAgPFJpZ2h0Q29udGFpbmVyPlxuICAgICAgICAgICAgICA8UmlnaHRXcmFwcGVyIGlkPVwic3R1Y2tcIiBjbGFzc05hbWU9e3RoaXMucHJvcHMuYWN0aXZlVG91dH0+XG4gICAgICAgICAgICAgICAgPFN0eWxlZENhcmRcbiAgICAgICAgICAgICAgICAgIGxpbmtVUkw9XCIvcmVlbFwiXG4gICAgICAgICAgICAgICAgICBhY3RpdmVUb3V0PXt0aGlzLnByb3BzLmFjdGl2ZVRvdXR9XG4gICAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX2N0YV90ZXh0LnJlZWxfdGV4dH1cbiAgICAgICAgICAgICAgICA+PC9TdHlsZWRDYXJkPlxuICAgICAgICAgICAgICAgIHsvKiA8U3R5bGVkVmlkZW9QbGF5ZXJcbiAgICAgICAgICAgICAgICAgIHRvZ2dsZT17dGhpcy5wcm9wcy5zdGF0ZX1cbiAgICAgICAgICAgICAgICAgIHNyYz17b3B0aW9ucy5hY2YudmlkZW9bXCJ1cmxcIl19XG4gICAgICAgICAgICAgICAgLz4gKi99XG4gICAgICAgICAgICAgICAgPFN0eWxlZENhcmRcbiAgICAgICAgICAgICAgICAgIGxpbmtVUkw9XCIvY29udGFjdFwiXG4gICAgICAgICAgICAgICAgICBhY3RpdmVUb3V0PXt0aGlzLnByb3BzLmFjdGl2ZVRvdXR9XG4gICAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX2N0YV90ZXh0Lndvcmtfc2FtcGxlX2Zvcm1fdGV4dH1cbiAgICAgICAgICAgICAgICA+PC9TdHlsZWRDYXJkPlxuICAgICAgICAgICAgICA8L1JpZ2h0V3JhcHBlcj5cbiAgICAgICAgICAgICAgPE5vdEZpeGVkQ29udGFpbmVyIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5hY3RpdmVUb3V0fT5cbiAgICAgICAgICAgICAgICA8U3R5bGVkQ2FyZFxuICAgICAgICAgICAgICAgICAgbGlua1VSTD1cIi9yZWVsXCJcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvdXQ9e3RoaXMucHJvcHMuYWN0aXZlVG91dH1cbiAgICAgICAgICAgICAgICAgIGxpbmtUZXh0PXtvcHRpb25zLmFjZi5mb290ZXJfY3RhX3RleHQucmVlbF90ZXh0fVxuICAgICAgICAgICAgICAgID48L1N0eWxlZENhcmQ+XG5cbiAgICAgICAgICAgICAgICA8U3R5bGVkQ2FyZFxuICAgICAgICAgICAgICAgICAgbGlua1VSTD1cIi9jb250YWN0XCJcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvdXQ9e3RoaXMucHJvcHMuYWN0aXZlVG91dH1cbiAgICAgICAgICAgICAgICAgIGxpbmtUZXh0PXtvcHRpb25zLmFjZi5mb290ZXJfY3RhX3RleHQud29ya19zYW1wbGVfZm9ybV90ZXh0fVxuICAgICAgICAgICAgICAgID48L1N0eWxlZENhcmQ+XG4gICAgICAgICAgICAgIDwvTm90Rml4ZWRDb250YWluZXI+XG4gICAgICAgICAgICA8L1JpZ2h0Q29udGFpbmVyPlxuICAgICAgICAgIDwvQm90dG9tRm9vdGVyPlxuICAgICAgICA8L0JvdHRvbVdyYXBwZXI+XG4gICAgICA8L0Zvb3RlckNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoRm9vdGVyKTtcblxuY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDE0NDBweDtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBwYWRkaW5nOiAyNHB4IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICBtYXJnaW46IGF1dG87XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICB3aWR0aDogYXV0bztcbiAgfVxuYDtcblxuY29uc3QgVGl0bGUgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5jb25zdCBTdHlsZWRDYXJkID0gc3R5bGVkKENlbnRlcmVkQ2FyZClgXG4gIG1hcmdpbi1yaWdodDogMTBweDtcbmA7XG5cbmNvbnN0IFN0eWxlZExpbmsgPSBzdHlsZWQoTGluaylgXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG5jb25zdCBGb290ZXJDb250YWluZXIgPSBzdHlsZWQuZGl2YGA7XG5jb25zdCBOb3RGaXhlZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIC5saW5rIHtcbiAgICAmLmZpcnN0IHtcbiAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgfVxuICAgIH1cbiAgICAmLmxhc3Qge1xuICAgICAgJjpsYXN0LW9mLXR5cGUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5jb25zdCBUb3BGb290ZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBtYXgtd2lkdGg6IDE0NDBweDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbjogYXV0bztcbiAgcGFkZGluZy10b3A6IDEyNXB4O1xuICBwYWRkaW5nLWJvdHRvbTogMTI1cHg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBwYWRkaW5nLWxlZnQ6IDYwcHg7XG4gICAgcGFkZGluZy1yaWdodDogNjBweDtcbiAgICB3aWR0aDogYXV0bztcbiAgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNDgwcHgpIHtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgcGFkZGluZy10b3A6IDYwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDYwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbmA7XG5jb25zdCBTdHlsZWRWaWRlb1BsYXllciA9IHN0eWxlZChGb290ZXJWaWRlb1BsYXllcilgXG4gIC8qIHotaW5kZXg6MTAwOyAqL1xuYDtcbmNvbnN0IFRvdXQgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogI2ZmZmZmZjtcbiAgd2lkdGg6IGNhbGMoNzAlIC8gMyk7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZy1sZWZ0OiAyMXB4O1xuXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgLmxpbmsge1xuICAgIHotaW5kZXg6IDY7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogLTExMHB4O1xuICAgIGxlZnQ6IDAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTUlKTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgICAgYSB7XG4gICAgICAgIGhlaWdodDogYXV0bztcbiAgICAgICAgd2lkdGg6IGF1dG87XG4gICAgICB9XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB0cmFuc2Zvcm06IG5vbmU7XG4gICAgICBib3R0b206IGF1dG87XG4gICAgICBoZWlnaHQ6IDUxcHg7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICB9XG4gICAgJi5maXJzdCB7XG4gICAgfVxuICB9XG4gIHAge1xuICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgbWF4LXdpZHRoOiA5NSU7XG4gIH1cbiAgaDQge1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTJweDtcbiAgfVxuICBhIHtcbiAgICBsZXR0ZXItc3BhY2luZzogMC44NHB4O1xuICAgIHBhZGRpbmctdG9wOiA1cHg7XG4gIH1cbiAgJjpiZWZvcmUge1xuICAgIHdpZHRoOiAycHg7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBoZWlnaHQ6IDExNSU7XG4gICAgbGVmdDogMDtcbiAgICBiYWNrZ3JvdW5kOiAjZmZjNDBhO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgICBoZWlnaHQ6IDkwJTtcbiAgICB9XG4gIH1cbiAgJjpmaXJzdC1vZi10eXBlIHtcbiAgICBtYXJnaW4tbGVmdDogMTE0cHg7XG4gICAgLmxpbmsge1xuICAgICAgLyogdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDE1JSk7ICovXG4gICAgfVxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICAgIC5saW5rIHtcbiAgICAgICAgdHJhbnNmb3JtOiBub25lO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgbWFyZ2luLXJpZ2h0OiAxMTRweDtcbiAgICAubGluayB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTIxJSk7XG4gICAgfVxuICB9XG4gIC8qICY6aG92ZXIge1xuICAgIGEge1xuICAgICAgY29sb3I6ICMxZDFkMWQ7XG4gICAgfVxuICB9ICovXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICB3aWR0aDogY2FsYyg5MCUgLyAyKTtcbiAgICBtYXJnaW4tYm90dG9tOiA2MHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIH1cbiAgICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgLmxpbmsge1xuICAgICAgICB0cmFuc2Zvcm06IG5vbmU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA0ODBweCkge1xuICAgIHdpZHRoOiA4MCU7XG4gICAgbWFyZ2luLWJvdHRvbTogNjBweDtcbiAgICBtYXJnaW4tbGVmdDogMzZweDtcbiAgICAmOmZpcnN0LW9mLXR5cGUge1xuICAgICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgICBtYXJnaW4tbGVmdDogMzZweDtcbiAgICB9XG4gICAgJjpsYXN0LW9mLXR5cGUge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAgIC5saW5rIHtcbiAgICAgICAgdHJhbnNmb3JtOiBub25lO1xuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgQm90dG9tRm9vdGVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgcGFkZGluZy1sZWZ0OiAxMTRweDtcbiAgcGFkZGluZy1yaWdodDogMTE0cHg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgcGFkZGluZy10b3A6IDM2cHg7XG4gIHBhZGRpbmctYm90dG9tOiAzM3B4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cbmA7XG5jb25zdCBUb3BXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZDogIzFkMWQxZDtcbmA7XG5jb25zdCBCb3R0b21XcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIG1hcmdpbjogYXV0bztcbmA7XG5jb25zdCBMZWZ0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBtYXJnaW4tdG9wOiA0MHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XG4gIH1cbmA7XG5jb25zdCBDZW50ZXJDb250YWluZXIgPSBzdHlsZWQoTGluaylgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogNTAlO1xuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJhY2tncm91bmQ6ICMwMDA7XG4gICAgbGVmdDogYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHBhZGRpbmctdG9wOiA0MHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiA0MHB4O1xuICAgIHN2ZyB7XG4gICAgICBwYXRoIHtcbiAgICAgICAgZmlsbDogI2ZmZjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3ZnIHtcbiAgICBwYXRoIHtcbiAgICAgIHRyYW5zaXRpb246IGZpbGwgMjUwbXMgZWFzZS1pbi1vdXQ7XG4gICAgfVxuICB9XG4gICY6aG92ZXIsXG4gICY6Zm9jdXMge1xuICAgIHN2ZyB7XG4gICAgICBwYXRoIHtcbiAgICAgICAgZmlsbDogI2ZmYzQwYTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5jb25zdCBSaWdodENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG5cbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIG1hcmdpbjogYXV0bztcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogNzIlO1xuICByaWdodDogMDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIC8qIGRpc3BsYXk6IG5vbmU7ICovXG4gIH1cbmA7XG5jb25zdCBSaWdodFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIGJvdHRvbTogMzZweDtcbiAgei1pbmRleDogOTA7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMjUwbXMgZWFzZS1pbi1vdXQ7XG4gIC5saW5rIHtcbiAgICAmLmZpcnN0IHtcbiAgICAgICY6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTgwcHg7XG4gICAgICAgIGEge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmM0MDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyogYm9yZGVyOjFweCBzb2xpZCAjZmZmOyAqL1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgICYubGFzdCB7XG4gICAgICAmOmZpcnN0LW9mLXR5cGUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgfVxuICAgICAgJjpsYXN0LW9mLXR5cGUge1xuICAgICAgICBhIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjNDAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgYm90dG9tOiA3NXB4O1xuICAgIHJpZ2h0OjM1cHg7XG4gICAgLmxpbmsge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgICAgJi5maXJzdCB7XG4gICAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgICAgICB9XG4gICAgICAgICY6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAmLmxhc3Qge1xuICAgICAgICAmOmZpcnN0LW9mLXR5cGUge1xuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgJi5hdC1ib3R0b20ge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG4gIH1cbmA7XG5jb25zdCBDb250YWN0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbmA7XG5jb25zdCBBZGRyZXNzID0gc3R5bGVkLmFgXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gIGxldHRlci1zcGFjaW5nOiAwO1xuICBjdXJzb3I6IG5vbmU7XG4gIHRyYW5zaXRpb246IGNvbG9yIDI1MG1zIGVhc2UtaW4tb3V0O1xuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBjb2xvcjogI2ZmYzQwMDtcbiAgfVxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgfVxuYDtcbmNvbnN0IFBob25lID0gc3R5bGVkKExpbmspYFxuICBmb250LXdlaWdodDogNTAwO1xuICBsaW5lLWhlaWdodDogMjBweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDA7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgdHJhbnNpdGlvbjogY29sb3IgMjUwbXMgZWFzZS1pbi1vdXQ7XG4gIGN1cnNvcjogbm9uZTtcbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7XG4gICAgY29sb3I6ICNmZmM0MDA7XG4gIH1cbmA7XG5jb25zdCBSZWVsTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbGluZS1oZWlnaHQ6IDEycHg7XG4gIGxldHRlci1zcGFjaW5nOiAwLjg0cHg7XG4gIG1hcmdpbjogYXV0bztcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG5jb25zdCBDaXJjbGVXcmFwcGVyID0gc3R5bGVkKExpbmspYFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbi1yaWdodDogMzBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODtcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgd2lkdGg6IDEzMHB4O1xuICBoZWlnaHQ6IDEzMHB4O1xuICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICB9XG5gO1xuY29uc3QgU2FtcGxlTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbGluZS1oZWlnaHQ6IDE0cHg7XG4gIGxldHRlci1zcGFjaW5nOiAwLjg0cHg7XG4gIHdpZHRoOiA3MCU7XG4gIG1hcmdpbjogYXV0bztcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG5jb25zdCBTb2NpYWxDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW4tcmlnaHQ6IDQ4cHg7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1hcmdpbi1yaWdodDogMDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkU29jaWFsTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsZXR0ZXItc3BhY2luZzogMDtcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gIHRyYW5zaXRpb246IGNvbG9yIDI1MG1zIGVhc2UtaW4tb3V0O1xuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBjb2xvcjogI2ZmYzQwMDtcbiAgfVxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgfVxuYDtcbiJdfQ== */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var BottomFooter=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma9\",label:\"BottomFooter\"})( false?undefined:{name:\"1ondozg\",styles:\"display:flex;padding-left:114px;padding-right:114px;justify-content:space-between;padding-top:36px;padding-bottom:33px;align-items:center;position:relative;@media (max-width:1024px){padding:0;flex-direction:column;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var TopWrapper=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma10\",label:\"TopWrapper\"})( false?undefined:{name:\"ejjpi9\",styles:\"background:#1d1d1d;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var BottomWrapper=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma11\",label:\"BottomWrapper\"})( false?undefined:{name:\"1o96zx8\",styles:\"max-width:1440px;margin:auto;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9taW5ob3EvU2l0ZXMvRm9ydFN0dWRpby9wYWNrYWdlcy9tYXJzLXRoZW1lL3NyYy9jb21wb25lbnRzL2Zvb3Rlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyWWdDIiwiZmlsZSI6Ii9Vc2Vycy9taW5ob3EvU2l0ZXMvRm9ydFN0dWRpby9wYWNrYWdlcy9tYXJzLXRoZW1lL3NyYy9jb21wb25lbnRzL2Zvb3Rlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IExpbmsgZnJvbSBcIi4vbGlua1wiO1xuaW1wb3J0IENhcmQgZnJvbSBcIi4vcGFydGlhbHMvY2FyZFwiO1xuaW1wb3J0IEZvb3RlclZpZGVvUGxheWVyIGZyb20gXCIuL3BhcnRpYWxzL0Zvb3RlclZpZGVvUGxheWVyXCI7XG5pbXBvcnQgQ2VudGVyZWRDYXJkIGZyb20gXCIuL3BhcnRpYWxzL2NlbnRlcmVkQ2FyZFwiO1xuY2xhc3MgRm9vdGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICBpc09uU2NyZWVuKCkge1xuICAgIC8qIGdldCB0aGUgZWxlbWVudHMgKi9cbiAgICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwic3B5XCIpO1xuICAgIC8qIGl0ZXJhdGUgKi9cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuICAgICAgdmFyIGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIGlmIChib3VuZHMudG9wIDwgd2luZG93LmlubmVySGVpZ2h0ICYmIGJvdW5kcy5ib3R0b20gPiAwKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImludmlld1wiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImludmlld1wiKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuaXNPblNjcmVlbi5iaW5kKHRoaXMpLCAyNTApO1xuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuaXNPblNjcmVlbi5iaW5kKHRoaXMpLCAyNTApO1xuICAgIC8vIHdpbmRvdy5vbnNjcm9sbCA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgLy8gICB2YXIgc3RpY2t5Zm9vdGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdHVja1wiKTtcbiAgICAvLyAgIGlmICh3aW5kb3cuaW5uZXJIZWlnaHQgKyB3aW5kb3cuc2Nyb2xsWSA+PSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCkge1xuICAgIC8vICAgICBzdGlja3lmb290ZXIuY2xhc3NMaXN0LmFkZChcImF0LWJvdHRvbVwiKTtcbiAgICAvLyAgIH0gZWxzZSB7XG4gICAgLy8gICAgIHN0aWNreWZvb3Rlci5jbGFzc0xpc3QucmVtb3ZlKFwiYXQtYm90dG9tXCIpO1xuICAgIC8vICAgfVxuICAgIC8vIH07XG4gICAgd2luZG93Lm9uc2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc3RpY2t5Zm9vdGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdHVja1wiKTtcbiAgICAgIHZhciBwYWdlSGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldEhlaWdodCxcbiAgICAgICAgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0LFxuICAgICAgICBzY3JvbGxQb3NpdGlvbiA9XG4gICAgICAgICAgd2luZG93LnNjcm9sbFkgfHxcbiAgICAgICAgICB3aW5kb3cucGFnZVlPZmZzZXQgfHxcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCArXG4gICAgICAgICAgICAoKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKSB8fFxuICAgICAgICAgICAgICAwKTtcblxuXG4gICAgICBpZiAocGFnZUhlaWdodCA8PSB3aW5kb3dIZWlnaHQgKyBzY3JvbGxQb3NpdGlvbikge1xuICAgICAgICAgc3RpY2t5Zm9vdGVyLmNsYXNzTGlzdC5hZGQoXCJhdC1ib3R0b21cIik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RpY2t5Zm9vdGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJhdC1ib3R0b21cIik7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucHJvcHMuc3RhdGUuc291cmNlLmdldChcImFjZi1vcHRpb25zLXBhZ2VcIik7XG4gICAgcmV0dXJuIChcbiAgICAgIDxGb290ZXJDb250YWluZXI+XG4gICAgICAgIDxUb3BXcmFwcGVyPlxuICAgICAgICAgIDxUb3BGb290ZXI+XG4gICAgICAgICAgICA8VG91dCBjbGFzc05hbWU9XCJzcHlcIj5cbiAgICAgICAgICAgICAgPGg0PntvcHRpb25zLmFjZi5mb290ZXJfc2VjdGlvbi5oaXJlX2hlYWRsaW5lfTwvaDQ+XG4gICAgICAgICAgICAgIDxwXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicDFcIlxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgICAgICBfX2h0bWw6IG9wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLmhpcmVfYm9keVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID48L3A+XG4gICAgICAgICAgICAgIDxDYXJkXG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICBsaW5rVVJMPVwibWFpbHRvOnByb2plY3RzQGZvcnR5ZWFoLmNvbVwiXG4gICAgICAgICAgICAgICAgbGlua1RleHQ9e29wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLmhpcmVfY3RhX3RleHR9XG4gICAgICAgICAgICAgID48L0NhcmQ+XG4gICAgICAgICAgICA8L1RvdXQ+XG4gICAgICAgICAgICA8VG91dCBjbGFzc05hbWU9XCJzcHlcIj5cbiAgICAgICAgICAgICAgPGg0PntvcHRpb25zLmFjZi5mb290ZXJfc2VjdGlvbi5yZXF1ZXN0X3dvcmtfaGVhZGxpbmV9PC9oND5cbiAgICAgICAgICAgICAgPHBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwMVwiXG4gICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24ucmVxdWVzdF93b3JrX2JvZHlcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+PC9wPlxuICAgICAgICAgICAgICA8Q2FyZFxuICAgICAgICAgICAgICAgIGxpbmtVUkw9XCIvY29udGFjdFwiXG4gICAgICAgICAgICAgICAgbGlua1RleHQ9e29wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLnJlcXVlc3Rfd29ya19jdGFfdGV4dH1cbiAgICAgICAgICAgICAgPjwvQ2FyZD5cbiAgICAgICAgICAgIDwvVG91dD5cbiAgICAgICAgICAgIDxUb3V0IGNsYXNzTmFtZT1cInNweVwiPlxuICAgICAgICAgICAgICA8aDQ+e29wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLmNhcmVlcnNfaGVhZGxpbmV9PC9oND5cbiAgICAgICAgICAgICAgPHBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwMVwiXG4gICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24uY2FyZWVyc19ib2R5XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPjwvcD5cbiAgICAgICAgICAgICAgPENhcmRcbiAgICAgICAgICAgICAgICBsaW5rVVJMPVwibWFpbHRvOmNhcmVlcnNAZm9ydHllYWguY29tXCJcbiAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24uY2FyZWVyc19jdGFfdGV4dH1cbiAgICAgICAgICAgICAgPjwvQ2FyZD5cbiAgICAgICAgICAgIDwvVG91dD5cbiAgICAgICAgICA8L1RvcEZvb3Rlcj5cbiAgICAgICAgPC9Ub3BXcmFwcGVyPlxuICAgICAgICA8Qm90dG9tV3JhcHBlcj5cbiAgICAgICAgICA8Qm90dG9tRm9vdGVyPlxuICAgICAgICAgICAgPENlbnRlckNvbnRhaW5lciBsaW5rPVwiL1wiPlxuICAgICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgICAgICAgd2lkdGg9XCIyNC40NjNcIlxuICAgICAgICAgICAgICAgIGhlaWdodD1cIjUyLjIyN1wiXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyNC40NjMgNTIuMjI3XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICBpZD1cImxvZ28tZl9zaG9ydFwiXG4gICAgICAgICAgICAgICAgICBkPVwiTTIzLjE2OSw0My4wMTFIMHY5LjIxNkgyMy4xNjlabS0xMi44LTMzLjhIMjQuNDYzVjBIMFYzMy44SDEwLjM2OVYyMy44MTJoMTIuOFYxNC41OTNoLTEyLjhaXCJcbiAgICAgICAgICAgICAgICAgIGZpbGw9XCIjMWQxZDFkXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIDwvQ2VudGVyQ29udGFpbmVyPlxuICAgICAgICAgICAgPExlZnRDb250YWluZXI+XG4gICAgICAgICAgICAgIDxTb2NpYWxDb250YWluZXI+XG4gICAgICAgICAgICAgICAgPFN0eWxlZFNvY2lhbExpbmtcbiAgICAgICAgICAgICAgICAgIHRhcmdldD17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uaW5zdGFncmFtLnRhcmdldH1cbiAgICAgICAgICAgICAgICAgIGxpbms9e29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmluc3RhZ3JhbS51cmx9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmluc3RhZ3JhbS50aXRsZX1cbiAgICAgICAgICAgICAgICA8L1N0eWxlZFNvY2lhbExpbms+XG4gICAgICAgICAgICAgICAgPFN0eWxlZFNvY2lhbExpbmtcbiAgICAgICAgICAgICAgICAgIHRhcmdldD17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uZHJpYmJsZS50YXJnZXR9XG4gICAgICAgICAgICAgICAgICBsaW5rPXtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5kcmliYmxlLnVybH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uZHJpYmJsZS50aXRsZX1cbiAgICAgICAgICAgICAgICA8L1N0eWxlZFNvY2lhbExpbms+XG4gICAgICAgICAgICAgICAgPFN0eWxlZFNvY2lhbExpbmtcbiAgICAgICAgICAgICAgICAgIHRhcmdldD17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24ubGlua2VkaW4udGFyZ2V0fVxuICAgICAgICAgICAgICAgICAgbGluaz17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24ubGlua2VkaW4udXJsfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5saW5rZWRpbi50aXRsZX1cbiAgICAgICAgICAgICAgICA8L1N0eWxlZFNvY2lhbExpbms+XG4gICAgICAgICAgICAgIDwvU29jaWFsQ29udGFpbmVyPlxuICAgICAgICAgICAgICA8Q29udGFjdENvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8QWRkcmVzc1xuICAgICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vZ29vLmdsL21hcHMvazJxTWlCSDhnYWZ4ajQ3YzdcIlxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+PC9BZGRyZXNzPlxuICAgICAgICAgICAgICAgIDxQaG9uZVxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgIGxpbms9e1widGVsOlwiICsgb3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24ucGhvbmVfbnVtYmVyX2ZpZWxkfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5waG9uZV9udW1iZXJfZmllbGR9XG4gICAgICAgICAgICAgICAgPC9QaG9uZT5cbiAgICAgICAgICAgICAgPC9Db250YWN0Q29udGFpbmVyPlxuICAgICAgICAgICAgPC9MZWZ0Q29udGFpbmVyPlxuICAgICAgICAgICAgPFJpZ2h0Q29udGFpbmVyPlxuICAgICAgICAgICAgICA8UmlnaHRXcmFwcGVyIGlkPVwic3R1Y2tcIiBjbGFzc05hbWU9e3RoaXMucHJvcHMuYWN0aXZlVG91dH0+XG4gICAgICAgICAgICAgICAgPFN0eWxlZENhcmRcbiAgICAgICAgICAgICAgICAgIGxpbmtVUkw9XCIvcmVlbFwiXG4gICAgICAgICAgICAgICAgICBhY3RpdmVUb3V0PXt0aGlzLnByb3BzLmFjdGl2ZVRvdXR9XG4gICAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX2N0YV90ZXh0LnJlZWxfdGV4dH1cbiAgICAgICAgICAgICAgICA+PC9TdHlsZWRDYXJkPlxuICAgICAgICAgICAgICAgIHsvKiA8U3R5bGVkVmlkZW9QbGF5ZXJcbiAgICAgICAgICAgICAgICAgIHRvZ2dsZT17dGhpcy5wcm9wcy5zdGF0ZX1cbiAgICAgICAgICAgICAgICAgIHNyYz17b3B0aW9ucy5hY2YudmlkZW9bXCJ1cmxcIl19XG4gICAgICAgICAgICAgICAgLz4gKi99XG4gICAgICAgICAgICAgICAgPFN0eWxlZENhcmRcbiAgICAgICAgICAgICAgICAgIGxpbmtVUkw9XCIvY29udGFjdFwiXG4gICAgICAgICAgICAgICAgICBhY3RpdmVUb3V0PXt0aGlzLnByb3BzLmFjdGl2ZVRvdXR9XG4gICAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX2N0YV90ZXh0Lndvcmtfc2FtcGxlX2Zvcm1fdGV4dH1cbiAgICAgICAgICAgICAgICA+PC9TdHlsZWRDYXJkPlxuICAgICAgICAgICAgICA8L1JpZ2h0V3JhcHBlcj5cbiAgICAgICAgICAgICAgPE5vdEZpeGVkQ29udGFpbmVyIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5hY3RpdmVUb3V0fT5cbiAgICAgICAgICAgICAgICA8U3R5bGVkQ2FyZFxuICAgICAgICAgICAgICAgICAgbGlua1VSTD1cIi9yZWVsXCJcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvdXQ9e3RoaXMucHJvcHMuYWN0aXZlVG91dH1cbiAgICAgICAgICAgICAgICAgIGxpbmtUZXh0PXtvcHRpb25zLmFjZi5mb290ZXJfY3RhX3RleHQucmVlbF90ZXh0fVxuICAgICAgICAgICAgICAgID48L1N0eWxlZENhcmQ+XG5cbiAgICAgICAgICAgICAgICA8U3R5bGVkQ2FyZFxuICAgICAgICAgICAgICAgICAgbGlua1VSTD1cIi9jb250YWN0XCJcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvdXQ9e3RoaXMucHJvcHMuYWN0aXZlVG91dH1cbiAgICAgICAgICAgICAgICAgIGxpbmtUZXh0PXtvcHRpb25zLmFjZi5mb290ZXJfY3RhX3RleHQud29ya19zYW1wbGVfZm9ybV90ZXh0fVxuICAgICAgICAgICAgICAgID48L1N0eWxlZENhcmQ+XG4gICAgICAgICAgICAgIDwvTm90Rml4ZWRDb250YWluZXI+XG4gICAgICAgICAgICA8L1JpZ2h0Q29udGFpbmVyPlxuICAgICAgICAgIDwvQm90dG9tRm9vdGVyPlxuICAgICAgICA8L0JvdHRvbVdyYXBwZXI+XG4gICAgICA8L0Zvb3RlckNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoRm9vdGVyKTtcblxuY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDE0NDBweDtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBwYWRkaW5nOiAyNHB4IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICBtYXJnaW46IGF1dG87XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICB3aWR0aDogYXV0bztcbiAgfVxuYDtcblxuY29uc3QgVGl0bGUgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5jb25zdCBTdHlsZWRDYXJkID0gc3R5bGVkKENlbnRlcmVkQ2FyZClgXG4gIG1hcmdpbi1yaWdodDogMTBweDtcbmA7XG5cbmNvbnN0IFN0eWxlZExpbmsgPSBzdHlsZWQoTGluaylgXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG5jb25zdCBGb290ZXJDb250YWluZXIgPSBzdHlsZWQuZGl2YGA7XG5jb25zdCBOb3RGaXhlZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIC5saW5rIHtcbiAgICAmLmZpcnN0IHtcbiAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgfVxuICAgIH1cbiAgICAmLmxhc3Qge1xuICAgICAgJjpsYXN0LW9mLXR5cGUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbmA7XG5jb25zdCBUb3BGb290ZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBtYXgtd2lkdGg6IDE0NDBweDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1hcmdpbjogYXV0bztcbiAgcGFkZGluZy10b3A6IDEyNXB4O1xuICBwYWRkaW5nLWJvdHRvbTogMTI1cHg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBwYWRkaW5nLWxlZnQ6IDYwcHg7XG4gICAgcGFkZGluZy1yaWdodDogNjBweDtcbiAgICB3aWR0aDogYXV0bztcbiAgfVxuICBAbWVkaWEgKG1heC13aWR0aDogNDgwcHgpIHtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgcGFkZGluZy10b3A6IDYwcHg7XG4gICAgcGFkZGluZy1ib3R0b206IDYwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbmA7XG5jb25zdCBTdHlsZWRWaWRlb1BsYXllciA9IHN0eWxlZChGb290ZXJWaWRlb1BsYXllcilgXG4gIC8qIHotaW5kZXg6MTAwOyAqL1xuYDtcbmNvbnN0IFRvdXQgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogI2ZmZmZmZjtcbiAgd2lkdGg6IGNhbGMoNzAlIC8gMyk7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZy1sZWZ0OiAyMXB4O1xuXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgLmxpbmsge1xuICAgIHotaW5kZXg6IDY7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogLTExMHB4O1xuICAgIGxlZnQ6IDAlO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTUlKTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgICAgYSB7XG4gICAgICAgIGhlaWdodDogYXV0bztcbiAgICAgICAgd2lkdGg6IGF1dG87XG4gICAgICB9XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB0cmFuc2Zvcm06IG5vbmU7XG4gICAgICBib3R0b206IGF1dG87XG4gICAgICBoZWlnaHQ6IDUxcHg7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICB9XG4gICAgJi5maXJzdCB7XG4gICAgfVxuICB9XG4gIHAge1xuICAgIGNvbG9yOiAjZmZmZmZmO1xuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgbWF4LXdpZHRoOiA5NSU7XG4gIH1cbiAgaDQge1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gICAgbWFyZ2luLWJvdHRvbTogMTJweDtcbiAgfVxuICBhIHtcbiAgICBsZXR0ZXItc3BhY2luZzogMC44NHB4O1xuICAgIHBhZGRpbmctdG9wOiA1cHg7XG4gIH1cbiAgJjpiZWZvcmUge1xuICAgIHdpZHRoOiAycHg7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBoZWlnaHQ6IDExNSU7XG4gICAgbGVmdDogMDtcbiAgICBiYWNrZ3JvdW5kOiAjZmZjNDBhO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgICBoZWlnaHQ6IDkwJTtcbiAgICB9XG4gIH1cbiAgJjpmaXJzdC1vZi10eXBlIHtcbiAgICBtYXJnaW4tbGVmdDogMTE0cHg7XG4gICAgLmxpbmsge1xuICAgICAgLyogdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDE1JSk7ICovXG4gICAgfVxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICAgIC5saW5rIHtcbiAgICAgICAgdHJhbnNmb3JtOiBub25lO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgbWFyZ2luLXJpZ2h0OiAxMTRweDtcbiAgICAubGluayB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTIxJSk7XG4gICAgfVxuICB9XG4gIC8qICY6aG92ZXIge1xuICAgIGEge1xuICAgICAgY29sb3I6ICMxZDFkMWQ7XG4gICAgfVxuICB9ICovXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICB3aWR0aDogY2FsYyg5MCUgLyAyKTtcbiAgICBtYXJnaW4tYm90dG9tOiA2MHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIH1cbiAgICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgLmxpbmsge1xuICAgICAgICB0cmFuc2Zvcm06IG5vbmU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA0ODBweCkge1xuICAgIHdpZHRoOiA4MCU7XG4gICAgbWFyZ2luLWJvdHRvbTogNjBweDtcbiAgICBtYXJnaW4tbGVmdDogMzZweDtcbiAgICAmOmZpcnN0LW9mLXR5cGUge1xuICAgICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgICBtYXJnaW4tbGVmdDogMzZweDtcbiAgICB9XG4gICAgJjpsYXN0LW9mLXR5cGUge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAgIC5saW5rIHtcbiAgICAgICAgdHJhbnNmb3JtOiBub25lO1xuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuY29uc3QgQm90dG9tRm9vdGVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgcGFkZGluZy1sZWZ0OiAxMTRweDtcbiAgcGFkZGluZy1yaWdodDogMTE0cHg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgcGFkZGluZy10b3A6IDM2cHg7XG4gIHBhZGRpbmctYm90dG9tOiAzM3B4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cbmA7XG5jb25zdCBUb3BXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZDogIzFkMWQxZDtcbmA7XG5jb25zdCBCb3R0b21XcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIG1hcmdpbjogYXV0bztcbmA7XG5jb25zdCBMZWZ0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBtYXJnaW4tdG9wOiA0MHB4O1xuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XG4gIH1cbmA7XG5jb25zdCBDZW50ZXJDb250YWluZXIgPSBzdHlsZWQoTGluaylgXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogNTAlO1xuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJhY2tncm91bmQ6ICMwMDA7XG4gICAgbGVmdDogYXV0bztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHBhZGRpbmctdG9wOiA0MHB4O1xuICAgIHBhZGRpbmctYm90dG9tOiA0MHB4O1xuICAgIHN2ZyB7XG4gICAgICBwYXRoIHtcbiAgICAgICAgZmlsbDogI2ZmZjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3ZnIHtcbiAgICBwYXRoIHtcbiAgICAgIHRyYW5zaXRpb246IGZpbGwgMjUwbXMgZWFzZS1pbi1vdXQ7XG4gICAgfVxuICB9XG4gICY6aG92ZXIsXG4gICY6Zm9jdXMge1xuICAgIHN2ZyB7XG4gICAgICBwYXRoIHtcbiAgICAgICAgZmlsbDogI2ZmYzQwYTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5jb25zdCBSaWdodENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG5cbiAgbWF4LXdpZHRoOiAxNDQwcHg7XG4gIG1hcmdpbjogYXV0bztcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogNzIlO1xuICByaWdodDogMDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIC8qIGRpc3BsYXk6IG5vbmU7ICovXG4gIH1cbmA7XG5jb25zdCBSaWdodFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIGJvdHRvbTogMzZweDtcbiAgei1pbmRleDogOTA7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMjUwbXMgZWFzZS1pbi1vdXQ7XG4gIC5saW5rIHtcbiAgICAmLmZpcnN0IHtcbiAgICAgICY6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTgwcHg7XG4gICAgICAgIGEge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmM0MDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyogYm9yZGVyOjFweCBzb2xpZCAjZmZmOyAqL1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgICYubGFzdCB7XG4gICAgICAmOmZpcnN0LW9mLXR5cGUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgfVxuICAgICAgJjpsYXN0LW9mLXR5cGUge1xuICAgICAgICBhIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAmOmJlZm9yZSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjNDAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgYm90dG9tOiA3NXB4O1xuICAgIHJpZ2h0OjM1cHg7XG4gICAgLmxpbmsge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgICAgJi5maXJzdCB7XG4gICAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgICAgICB9XG4gICAgICAgICY6bGFzdC1vZi10eXBlIHtcbiAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAmLmxhc3Qge1xuICAgICAgICAmOmZpcnN0LW9mLXR5cGUge1xuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgJi5hdC1ib3R0b20ge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG4gIH1cbmA7XG5jb25zdCBDb250YWN0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIH1cbmA7XG5jb25zdCBBZGRyZXNzID0gc3R5bGVkLmFgXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gIGxldHRlci1zcGFjaW5nOiAwO1xuICBjdXJzb3I6IG5vbmU7XG4gIHRyYW5zaXRpb246IGNvbG9yIDI1MG1zIGVhc2UtaW4tb3V0O1xuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBjb2xvcjogI2ZmYzQwMDtcbiAgfVxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgfVxuYDtcbmNvbnN0IFBob25lID0gc3R5bGVkKExpbmspYFxuICBmb250LXdlaWdodDogNTAwO1xuICBsaW5lLWhlaWdodDogMjBweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDA7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgdHJhbnNpdGlvbjogY29sb3IgMjUwbXMgZWFzZS1pbi1vdXQ7XG4gIGN1cnNvcjogbm9uZTtcbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7XG4gICAgY29sb3I6ICNmZmM0MDA7XG4gIH1cbmA7XG5jb25zdCBSZWVsTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbGluZS1oZWlnaHQ6IDEycHg7XG4gIGxldHRlci1zcGFjaW5nOiAwLjg0cHg7XG4gIG1hcmdpbjogYXV0bztcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG5jb25zdCBDaXJjbGVXcmFwcGVyID0gc3R5bGVkKExpbmspYFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbi1yaWdodDogMzBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODtcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgd2lkdGg6IDEzMHB4O1xuICBoZWlnaHQ6IDEzMHB4O1xuICAmOmxhc3Qtb2YtdHlwZSB7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICB9XG5gO1xuY29uc3QgU2FtcGxlTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbGluZS1oZWlnaHQ6IDE0cHg7XG4gIGxldHRlci1zcGFjaW5nOiAwLjg0cHg7XG4gIHdpZHRoOiA3MCU7XG4gIG1hcmdpbjogYXV0bztcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG5jb25zdCBTb2NpYWxDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW4tcmlnaHQ6IDQ4cHg7XG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1hcmdpbi1yaWdodDogMDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkU29jaWFsTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsZXR0ZXItc3BhY2luZzogMDtcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gIHRyYW5zaXRpb246IGNvbG9yIDI1MG1zIGVhc2UtaW4tb3V0O1xuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBjb2xvcjogI2ZmYzQwMDtcbiAgfVxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgfVxuYDtcbiJdfQ== */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var LeftContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma12\",label:\"LeftContainer\"})( false?undefined:{name:\"hsupzj\",styles:\"display:flex;@media (max-width:1024px){justify-content:space-around;width:100%;flex-direction:column;justify-content:center;align-items:center;margin-top:40px;margin-bottom:40px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CenterContainer=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma13\",label:\"CenterContainer\"})( false?undefined:{name:\"1e6mgwf\",styles:\"position:absolute;left:50%;@media (max-width:1024px){position:relative;background:#000;left:auto;width:100%;display:flex;justify-content:center;padding-top:40px;padding-bottom:40px;svg{path{fill:#fff;}}}svg{path{transition:fill 250ms ease-in-out;}}&:hover,&:focus{svg{path{fill:#ffc40a;}}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var RightContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma14\",label:\"RightContainer\"})( false?undefined:{name:\"1vfwsgu\",styles:\"display:flex;max-width:1440px;margin:auto;bottom:0;left:0;width:72%;right:0;justify-content:flex-end;@media (max-width:1024px){}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var RightWrapper=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma15\",label:\"RightWrapper\"})( false?undefined:{name:\"77kwn\",styles:\"display:flex;position:fixed;bottom:36px;z-index:90;transition:opacity 250ms ease-in-out;.link{&.first{&:last-of-type{opacity:0;display:none;}&:first-of-type{margin-right:180px;a{background-color:transparent;&:before{background-color:#ffc400;}}}}&.last{&:first-of-type{opacity:0;display:none;}&:last-of-type{a{background-color:transparent;&:before{background-color:#ffc400;}}}}}@media (max-width:1024px){bottom:75px;right:35px;.link{margin-right:0;&.first{&:first-of-type{margin-right:0;}&:last-of-type{display:none;}}&.last{&:first-of-type{display:none;}}}&.at-bottom{opacity:0;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var ContactContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma16\",label:\"ContactContainer\"})( false?undefined:{name:\"1kvfyj7\",styles:\"display:flex;flex-direction:column;@media (max-width:1024px){align-items:center;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Address=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"a\",{target:\"e8kjvma17\",label:\"Address\"})( false?undefined:{name:\"98x0bn\",styles:\"font-weight:300;font-size:16px;line-height:20px;letter-spacing:0;cursor:none;transition:color 250ms ease-in-out;&:hover,&:focus{color:#ffc400;}@media (max-width:1024px){margin-bottom:20px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Phone=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma18\",label:\"Phone\"})( false?undefined:{name:\"n8idqb\",styles:\"font-weight:500;line-height:20px;letter-spacing:0;font-size:16px;transition:color 250ms ease-in-out;cursor:none;&:hover,&:focus{color:#ffc400;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var ReelLink=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma19\",label:\"ReelLink\"})( false?undefined:{name:\"1muei05\",styles:\"display:flex;flex-direction:column;align-items:center;justify-content:center;position:absolute;top:0;left:0;width:100%;height:100%;bottom:0;right:0;text-align:center;font-size:14px;font-weight:500;line-height:12px;letter-spacing:0.84px;margin:auto;text-transform:uppercase;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CircleWrapper=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma20\",label:\"CircleWrapper\"})( false?undefined:{name:\"1tm3486\",styles:\"position:relative;margin-right:30px;background-color:#f8f8f8;border-radius:100%;width:130px;height:130px;&:last-of-type{margin-right:0;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var SampleLink=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma21\",label:\"SampleLink\"})( false?undefined:{name:\"1n6r752\",styles:\"display:flex;flex-direction:column;align-items:center;justify-content:center;position:absolute;top:0;left:0;width:100%;height:100%;bottom:0;right:0;text-align:center;font-size:14px;font-weight:500;line-height:14px;letter-spacing:0.84px;width:70%;margin:auto;text-transform:uppercase;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var SocialContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma22\",label:\"SocialContainer\"})( false?undefined:{name:\"1olsj5n\",styles:\"display:flex;flex-direction:column;margin-right:48px;@media (max-width:1024px){align-items:center;margin-right:0;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var StyledSocialLink=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma23\",label:\"StyledSocialLink\"})( false?undefined:{name:\"mvs5ke\",styles:\"font-weight:500;font-size:16px;letter-spacing:0;line-height:20px;transition:color 250ms ease-in-out;&:hover,&:focus{color:#ffc400;}@media (max-width:1024px){margin-bottom:20px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/footer.js\n");

/***/ })

})