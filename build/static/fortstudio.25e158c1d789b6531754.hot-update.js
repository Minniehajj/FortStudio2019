webpackHotUpdate("fortstudio",{

/***/ "./packages/mars-theme/src/components/partials/introSection.js":
/*!*********************************************************************!*\
  !*** ./packages/mars-theme/src/components/partials/introSection.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _card__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./card */ \"./packages/mars-theme/src/components/partials/card.js\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var IntroSection=props=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Container,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(LeftContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"h2\",{dangerouslySetInnerHTML:{__html:props.layout.headline}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(BodyContainer,{className:\"p1\",dangerouslySetInnerHTML:{__html:props.layout.body}})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(RightContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(ToutContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(HeadlineContainer,{dangerouslySetInnerHTML:{__html:props.layout.strategy_section.headline}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(BodyContainer,{className:\"p2\",dangerouslySetInnerHTML:{__html:props.layout.strategy_section.body}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(HoverBody,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"svg\",{id:\"Collapse_Expand_1\",\"data-name\":\"Collapse/Expand 1\",xmlns:\"http://www.w3.org/2000/svg\",width:\"58.739\",height:\"58.739\",viewBox:\"0 0 58.739 58.739\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"g\",{id:\"Collapse_Expand_1-2\",\"data-name\":\"Collapse/Expand 1\",transform:\"translate(55.36 -716.142) rotate(60)\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"g\",{id:\"Ellipse_1\",\"data-name\":\"Ellipse 1\",transform:\"translate(611.136 373.764)\",fill:\"none\",stroke:\"#ffc40a\",strokeWidth:\"11\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"circle\",{cx:\"21.5\",cy:\"21.5\",r:\"21.5\",stroke:\"none\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"circle\",{cx:\"21.5\",cy:\"21.5\",r:\"16\",fill:\"none\"})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"circle\",{id:\"Ellipse_8\",\"data-name\":\"Ellipse 8\",cx:\"3\",cy:\"3\",r:\"3\",transform:\"translate(629.265 392.363)\"}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(_card__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{text:props.layout.strategy_section.hover_body}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(ToutContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(HeadlineContainer,{dangerouslySetInnerHTML:{__html:props.layout.identity_section.headline}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(BodyContainer,{className:\"p2\",dangerouslySetInnerHTML:{__html:props.layout.identity_section.body}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(HoverBody,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"svg\",{id:\"Collapse_Expand_1\",\"data-name\":\"Collapse/Expand 1\",xmlns:\"http://www.w3.org/2000/svg\",width:\"58.739\",height:\"58.739\",viewBox:\"0 0 58.739 58.739\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"g\",{id:\"Collapse_Expand_1-2\",\"data-name\":\"Collapse/Expand 1\",transform:\"translate(55.36 -716.142) rotate(60)\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"g\",{id:\"Ellipse_1\",\"data-name\":\"Ellipse 1\",transform:\"translate(611.136 373.764)\",fill:\"none\",stroke:\"#ffc40a\",strokeWidth:\"11\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"circle\",{cx:\"21.5\",cy:\"21.5\",r:\"21.5\",stroke:\"none\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"circle\",{cx:\"21.5\",cy:\"21.5\",r:\"16\",fill:\"none\"})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"circle\",{id:\"Ellipse_8\",\"data-name\":\"Ellipse 8\",cx:\"3\",cy:\"3\",r:\"3\",transform:\"translate(629.265 392.363)\"}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(_card__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{text:props.layout.identity_section.hover_body}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(ToutContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(HeadlineContainer,{dangerouslySetInnerHTML:{__html:props.layout.design_section.headline}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(BodyContainer,{className:\"p2\",dangerouslySetInnerHTML:{__html:props.layout.design_section.body}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(HoverBody,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"svg\",{id:\"Collapse_Expand_1\",\"data-name\":\"Collapse/Expand 1\",xmlns:\"http://www.w3.org/2000/svg\",width:\"58.739\",height:\"58.739\",viewBox:\"0 0 58.739 58.739\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"g\",{id:\"Collapse_Expand_1-2\",\"data-name\":\"Collapse/Expand 1\",transform:\"translate(55.36 -716.142) rotate(60)\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"g\",{id:\"Ellipse_1\",\"data-name\":\"Ellipse 1\",transform:\"translate(611.136 373.764)\",fill:\"none\",stroke:\"#ffc40a\",strokeWidth:\"11\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"circle\",{cx:\"21.5\",cy:\"21.5\",r:\"21.5\",stroke:\"none\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"circle\",{cx:\"21.5\",cy:\"21.5\",r:\"16\",fill:\"none\"})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"circle\",{id:\"Ellipse_8\",\"data-name\":\"Ellipse 8\",cx:\"3\",cy:\"3\",r:\"3\",transform:\"translate(629.265 392.363)\"}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(_card__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{text:props.layout.design_section.hover_body})))));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(IntroSection));var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"eka64jj0\",label:\"Container\"})( false?undefined:{name:\"90w7gf\",styles:\"width:1440px;margin:auto;box-sizing:border-box;padding:0 119px;display:flex;flex-direction:row;max-width:none;@media (max-width:768px){flex-direction:column;padding:0;margin-left:36px;margin-right:36px;width:auto;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var HoverBody=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"eka64jj1\",label:\"HoverBody\"})( false?undefined:{name:\"yh8yxd\",styles:\"position:absolute;left:-125px;top:-5px;max-width:none;width:100%;h5{display:none;transition:opacity 250ms ease-in;position:absolute;top:0;text-align:center;text-transform:uppercase;width:50%;margin:auto;}svg{}&:hover,&:focus{h5{display:block;transition:none;}svg{opacity:0;}}@media (max-width:768px){left:0;top:-60%;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var LeftContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"eka64jj2\",label:\"LeftContainer\"})( false?undefined:{name:\"1b29h0v\",styles:\"display:flex;flex-direction:column;position:sticky;width:55%;top:260px;padding-bottom:177px;height:fit-content;@media (max-width:768px){position:relative;margin-top:161px;top:auto;padding-bottom:109px;width:100%;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var RightContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"eka64jj3\",label:\"RightContainer\"})( false?undefined:{name:\"zki7h6\",styles:\"width:22.5%;align-self:flex-end;margin-top:548px;@media (max-width:768px){align-self:center;width:100%;margin-top:0;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var BodyContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"eka64jj4\",label:\"BodyContainer\"})( false?undefined:{name:\"tr0r3x\",styles:\"margin-top:15px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var HeadlineContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"h4\",{target:\"eka64jj5\",label:\"HeadlineContainer\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var ToutContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"eka64jj6\",label:\"ToutContainer\"})( false?undefined:{name:\"boqikz\",styles:\"margin-bottom:103px;position:relative;&:last-of-type{margin-bottom:177px;}@media (max-width:768px){text-align:center;width:80vw;margin-bottom:137px;&:last-of-type{margin-bottom:80px;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});// const//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/partials/introSection.js\n");

/***/ })

})